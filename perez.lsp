(defun AtomToNum (x)
  (Cond ((eq x 'A) 0)
	((eq x 'B) 1)
	((eq x 'C) 2)
	((eq x 'D) 3)
	((eq x 'E) 4)
	((eq x 'F) 5)
	((eq x 'G) 6)
	((eq x 'H) 7)
	((eq x 'I) 8)
	((eq x 'J) 9)
	((eq x 'K) 10)
	((eq x 'L) 11)
	((eq x 'M) 12)
	((eq x 'N) 13)
	((eq x 'O) 14)
	((eq x 'P) 15)
	((eq x 'Q) 16)
	((eq x 'R) 17)
	((eq x 'S) 18)
	((eq x 'T) 19)
	((eq x 'U) 20)
	((eq x 'V) 21)
	((eq x 'W) 22)
	((eq x 'X) 23)
	((eq x 'Y) 24)
	((eq x 'Z) 25)
	(T NIL) )
)

(defun Rot (val rot)
	(mod (+ val rot) 26)
)

(defun NumToAtom (num)
  (Cond ((eq num 0) 'A)
  ((eq num 1) 'B)
  ((eq num 2) 'C)
  ((eq num 3) 'D)
  ((eq num 4) 'E)
  ((eq num 5) 'F)
  ((eq num 6) 'G)
  ((eq num 7) 'H)
  ((eq num 8) 'I)
  ((eq num 9) 'J)
  ((eq num 10) 'K)
  ((eq num 11) 'L)
  ((eq num 12) 'M)
  ((eq num 13) 'N)
  ((eq num 14) 'O)
  ((eq num 15) 'P)
  ((eq num 16) 'Q)
  ((eq num 17) 'R)
  ((eq num 18) 'S)
  ((eq num 19) 'T)
  ((eq num 20) 'U)
  ((eq num 21) 'V)
  ((eq num 22) 'W)
  ((eq num 23) 'X)
  ((eq num 24) 'Y)
  ((eq num 25) 'Z)
	(T NIL) )
)

(defun EncodeAtom (letter)
	(NumToAtom (Rot (AtomToNum letter) 5) )
)

(defun DecodeAtom (letter)
	(NumToAtom (Rot (AtomToNum letter) 21) )
)

(defun PrintWords(words)
	
	(Cond ((null words) words)
		((atom words) (format t "~a" words))
		((listp (car words)) (CONCATENATE  (PrintWords (car words)) " " ) )
		(T  (CONCATENATE (PrintWords (car words)) (PrintWords (cdr words)) )) )
)

(defun EncodeList (words)
	(Cond ((null words) words)
		((atom words) (list (EncodeAtom words)))
		((listp (car words)) (append (list (EncodeList (car words) )) (EncodeList (cdr words))) )
		(T  (append (EncodeList (car words)) (EncodeList (cdr words)) )) )
) 

(defun Encode (words)
	(princ (EncodeList words))
)

(defun DecodeList (words)
	(Cond ((null words) words)
		((atom words) (list (DecodeAtom words)))
		((listp (car words)) (append (list (DecodeList (car words) )) (DecodeList (cdr words))) )
		(T  (append (DecodeList (car words)) (DecodeList (cdr words)) )) )
)

(defun Decode (words)
	(princ (DecodeList words))
)